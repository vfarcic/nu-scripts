{"type":"entity","name":"Script change verification","observations":["Always check whether a change to a script works by running it with --help."],"entityType":"development guideline"}
{"type":"entity","observations":["When creating or working on scripts, always follow patterns from1 other scripts in this project."],"entityType":"guideline","name":"scripting_guidelines"}
{"type":"entity","name":"tool_usage_guideline_nushell","entityType":"guideline","observations":["When needing more information about Nushell, use Context7."]}
{"type":"entity","observations":["After every change to a script, validate it by running `./dot.nu <function_name> --help`. For example, for a function `main apply mcp` in a script, the validation command would be `./dot.nu apply mcp --help`."],"entityType":"guideline","name":"script_validation_guideline_dot_nu"}
{"type":"entity","entityType":"guideline","observations":["Always keep an extra line after `#!/usr/bin/env nu`."],"name":"nushell_script_formatting_guideline"}
{"type":"entity","name":"nushell_argument_comment_style","entityType":"guideline","observations":["Keep all comments for Nushell function arguments on the same line as the argument definition. For example, `arg_name: type, # Comment here` or `--flag_name: type = default, # Comment here`."]}
{"type":"entity","observations":["Do not manually create a 'Flags:' section in Nushell script docstrings. Nushell auto-generates flag help text from the comments written directly next to the flag definitions in the function signature."],"name":"nushell_docstring_flags_section","entityType":"guideline"}
{"type":"entity","name":"git_push_on_completion","entityType":"workflow_guideline","observations":["When the user indicates that the work is done (or uses a similar expression), push ALL accumulated changes to the Git repository."]}
{"type":"entity","entityType":"tool_preference_guideline","name":"git_vs_github_mcp_usage","observations":["Use the `git` CLI (via terminal commands) for standard Git operations like commit, push, pull, branch, etc. Use the GitHub MCP tools for interacting with GitHub-specific features like issues, pull requests, repository settings, and GitHub search."]}